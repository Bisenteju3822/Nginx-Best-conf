worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/json;

    access_log logs/access.log;
    error_log logs/error.log;

    # Rate Limiting: 10 requests per second per IP
    limit_req_zone $binary_remote_addr zone=req_limit:10m rate=10r/s;

    # IP Filtering (block specific IPs)
    geo $blocked_ip {
        default 0;
        192.168.1.100 1;  # Example blocked IP
    }

    # Extract Bearer token from Authorization header
    map $http_authorization $auth_token {
        default "";
        "~^Bearer\s+(.*)$" $1;
    }

    # Combine URI and auth token check for /auth/ path
    map "$request_uri|$auth_token" $auth_check {
        "~^/auth/login\|" 0;
        "~\|$" 1;
        default 0;
    }

    # Define backend upstreams
    upstream auth_service {
        server 127.0.0.1:5007;
        server 127.0.0.1:5008;
    }
    upstream user_service {
        server 127.0.0.1:5002;
    }
    upstream wallet_service {
        server 127.0.0.1:5001;
    }
    upstream game_service {
        server 127.0.0.1:5006;
    }
    upstream kyc_service {
        server 127.0.0.1:5005;
    }
    upstream leaderboard_service {
        server 127.0.0.1:5004;
    }
    upstream payment_service {
        server 127.0.0.1:5003;
    }

    # Main HTTPS server
    server {
        listen 443 ssl;
        server_name 192.168.240.40;  # Replace with your IP or domain

        ssl_certificate     C:/Users/tejas/OneDrive/Desktop/Main-Api-Gateway/certs/nginx-selfsigned.crt;
        ssl_certificate_key C:/Users/tejas/OneDrive/Desktop/Main-Api-Gateway/certs/nginx-selfsigned.key;

        # Apply rate limiting
        limit_req zone=req_limit burst=10 nodelay;

        # ===== AUTH SERVICE =====
        location /auth/ {
            if ($blocked_ip) {
                return 403 '{"error":"Your IP is blocked"}';
            }

            if ($auth_check) {
                return 401 '{"error":"Missing or invalid Authorization header"}';
            }

            proxy_pass http://auth_service/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
        }

        # ===== USER SERVICE =====
        location /user/ {
            if ($blocked_ip) {
                return 403 '{"error":"Your IP is blocked"}';
            }
            if ($auth_token = "") {
                return 401 '{"error":"Missing or invalid Authorization header"}';
            }

            proxy_pass http://user_service/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
        }

        # ===== WALLET SERVICE =====
        location /wallet/ {
            if ($blocked_ip) {
                return 403 '{"error":"Your IP is blocked"}';
            }
            if ($auth_token = "") {
                return 401 '{"error":"Missing or invalid Authorization header"}';
            }

            proxy_pass http://wallet_service/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
        }

        # ===== GAME SERVICE =====
        location /game/ {
            if ($blocked_ip) {
                return 403 '{"error":"Your IP is blocked"}';
            }
            if ($auth_token = "") {
                return 401 '{"error":"Missing or invalid Authorization header"}';
            }

            proxy_pass http://game_service/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
        }

        # ===== KYC SERVICE =====
        location /kyc/ {
            if ($blocked_ip) {
                return 403 '{"error":"Your IP is blocked"}';
            }
            if ($auth_token = "") {
                return 401 '{"error":"Missing or invalid Authorization header"}';
            }

            proxy_pass http://kyc_service/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
        }

        # ===== LEADERBOARD SERVICE =====
        location /leaderboard/ {
            if ($blocked_ip) {
                return 403 '{"error":"Your IP is blocked"}';
            }
            if ($auth_token = "") {
                return 401 '{"error":"Missing or invalid Authorization header"}';
            }

            proxy_pass http://leaderboard_service/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
        }

        # ===== PAYMENT SERVICE =====
        location /payment/ {
            if ($blocked_ip) {
                return 403 '{"error":"Your IP is blocked"}';
            }
            if ($auth_token = "") {
                return 401 '{"error":"Missing or invalid Authorization header"}';
            }

            proxy_pass http://payment_service/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
        }

        # Error Pages
        error_page 403 404 500 502 503 504 /error.json;
        location = /error.json {
            internal;
            add_header Content-Type application/json;
            return 500 '{"error":"Internal server error"}';
        }
    }

    # HTTP to HTTPS Redirect
    server {
        listen 80;
        server_name 192.168.240.40;
        return 301 https://$host$request_uri;
    }
}
